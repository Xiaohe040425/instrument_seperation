"""
Wind Instrument Assignment System - Main Entry Point
Automatically outputs MIDI, WAV, and MP3 formats
"""

import sys
from pathlib import Path
from core.instrument_assignment import WindInstrumentAssigner
from core.audio_converter import AudioConverter


def main():
    print("üé∫ Wind Instrument Assignment System v2.0")
    print("=" * 60)
    print("Auto-generates: MIDI + WAV + MP3")
    print()

    # ÂàùÂßãÂåñÂàÜÈÖçÂô®ÂíåÈü≥È†ªËΩâÊèõÂô®
    try:
        assigner = WindInstrumentAssigner()
        audio_converter = AudioConverter()
    except Exception as e:
        print(f"‚ùå Initialization failed: {e}")
        return False

    # Ë®≠ÂÆöÊ™îÊ°àË∑ØÂæë
    base_path = Path(__file__).parent

    # Ê™¢Êü•ÊòØÂê¶ÊúâÊ∏¨Ë©¶Ê™îÊ°à
    test_midi = base_path / "examples" / "input_midi" / "test.mid"
    test_metadata = base_path / "examples" / "assignment_json" / "test_metadata.json"
    output_midi = base_path / "examples" / "output" / "converted.mid"
    output_wav = base_path / "examples" / "output" / "converted.wav"
    output_mp3 = base_path / "examples" / "output" / "converted.mp3"

    # Â¶ÇÊûúÊ≤íÊúâÊ∏¨Ë©¶Ê™îÊ°àÔºåÊèêÁ§∫Áî®Êà∂
    if not test_midi.exists():
        print("üìÅ No test MIDI file found.")
        print(f"   Please place a MIDI file at: {test_midi}")
        print("   Or specify a custom path:")

        custom_path = input("Enter MIDI file path (or press Enter to skip): ").strip()
        if custom_path:
            test_midi = Path(custom_path)
        else:
            print("‚ÑπÔ∏è  Skipping test - no MIDI file provided")
            return True

    # Ê™¢Êü•Ê™îÊ°àÊòØÂê¶Â≠òÂú®
    if not test_midi.exists():
        print(f"‚ùå MIDI file not found: {test_midi}")
        return False

    if not test_metadata.exists():
        print(f"‚ùå Metadata file not found: {test_metadata}")
        return False

    # Á¢∫‰øùËº∏Âá∫ÁõÆÈåÑÂ≠òÂú®
    output_midi.parent.mkdir(parents=True, exist_ok=True)

    # Âü∑Ë°åMIDIËΩâÊèõ
    print(f"üöÄ Starting conversion...")
    print(f"   Input MIDI: {test_midi}")
    print(f"   Assignment: {test_metadata}")
    print()

    print("üìù Step 1: MIDI-to-MIDI conversion...")
    midi_success = assigner.process_assignment(
        str(test_midi), str(test_metadata), str(output_midi)
    )

    if not midi_success:
        print("‚ùå MIDI conversion failed!")
        return False

    print("‚úÖ MIDI conversion completed!")

    # Ëá™ÂãïÈÄ≤Ë°åÊâÄÊúâÈü≥È†ªËΩâÊèõ
    print("\nüéµ Step 2: Converting to audio formats...")

    conversion_results = []

    # WAVËΩâÊèõ
    print("   üîÑ Converting to WAV...")
    wav_success = audio_converter.midi_to_audio(
        str(output_midi), str(output_wav), "wav"
    )
    conversion_results.append(("WAV", wav_success, output_wav))

    # MP3ËΩâÊèõ
    print("   üîÑ Converting to MP3...")
    mp3_success = audio_converter.midi_to_audio(
        str(output_midi), str(output_mp3), "mp3"
    )
    conversion_results.append(("MP3", mp3_success, output_mp3))

    # ÁµêÊûúÂ†±Âëä
    print("\nüìä Conversion Results:")
    print(f"   ‚úÖ MIDI: {output_midi}")

    for format_name, success, file_path in conversion_results:
        if success:
            print(f"   ‚úÖ {format_name}: {file_path}")
        else:
            print(f"   ‚ùå {format_name}: Failed")

    # Áµ±Ë®àÊàêÂäüÁéá
    successful_conversions = 1 + sum(
        1 for _, success, _ in conversion_results if success
    )  # +1 for MIDI
    total_conversions = 1 + len(conversion_results)

    print(
        f"\nüéâ Completed: {successful_conversions}/{total_conversions} formats successfully generated"
    )

    if successful_conversions == total_conversions:
        print("üéä All formats generated successfully!")
        return True
    elif successful_conversions > 1:
        print("‚ö†Ô∏è  Some formats failed, but MIDI conversion was successful")
        return True
    else:
        print("‚ùå Only MIDI conversion succeeded")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
